service: serverless-image-rendering

custom:
  envName: '${self:provider.stage}'
  apigwBinary:
    types:
      - '*/*'

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  timeout: 5 # optional, in seconds, default is 6

  role: ImageRenderingRole

  environment:
    ENV_NAME: ${self:custom.envName}
    APP_NAME: serverless-image-rendering
    BUCKET: YOUR-S3-BUCKET-NAME

plugins:
  - serverless-offline
  - serverless-apigw-binary
  - serverless-apigwy-binary

functions:
  resizeImage:
    name: ${self:service}-${self:provider.stage}
    description: real time image resizing
    handler: handler.resizeImage
    events:
      - http:
          path: resize-image
          method: get
          contentHandling: CONVERT_TO_BINARY

resources:
  Resources:
    ImageRenderingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-S3-AND-LOG-ACCESS
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-s3-and-log-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - "s3:GetObject"
                  Resource:
                    - 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'
